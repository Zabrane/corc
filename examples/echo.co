{%

#include <stdlib.h>
#include <fcntl.h>
#include <errno.h>
#include <netdb.h>
#include <unistd.h>
#define FIBER_IMPL
#include "fiber.h"

#define BUF_SIZE 128

struct echo_server_s {
  int socket;
  int port;
  socklen_t len;
  struct sockaddr_in addr;
};

struct echo_session_s {
  int socket;
  char* buf;
  int bytes;
  int active;
};

await_t call_echo_server_listen(int* state, struct echo_server_s* arg);
await_t call_echo_session(int* state, struct echo_session_s* arg);

declare_fiber(echo_server_listen, struct echo_server_s*);
declare_fiber(echo_session, struct echo_session_s*);

void accept_connection(struct echo_server_s* arg) {
  int sock = accept(arg->socket, (struct sockaddr *)&arg->addr, &arg->len);
  if (sock > 0) {
    struct echo_session_s* session = malloc(sizeof(struct echo_session_s));
    session->socket = sock;
    int flags = fcntl(sock, F_GETFL, 0);
    fcntl(sock, F_SETFL, flags | O_NONBLOCK);
    spawn_fiber(echo_session, session);
  }
}

void bind_localhost(int s, struct sockaddr_in* addr, int port) {
  addr->sin_family = AF_INET;
  addr->sin_addr.s_addr = INADDR_ANY;
  addr->sin_port = htons(port);
  int rc = bind(s, (struct sockaddr *)addr, sizeof(struct sockaddr_in));;
  if (rc < 0) {
    exit(1);
  }
}

void echo_listen(struct echo_server_s* serv) {
  serv->socket = socket(AF_INET, SOCK_STREAM, 0);
  bind_localhost(serv->socket, &serv->addr, serv->port);
  serv->len = sizeof(serv->addr);
  listen(serv->socket, 10);
}

void read_client_socket(struct echo_session_s* session) {
  errno = 0;
  if (!session->buf) {
    session->buf = malloc(BUF_SIZE);
  }
  session->bytes = read(session->socket, session->buf, BUF_SIZE);
  if (session->bytes == 0) {
    session->active = 0;
  }
}

void write_client_socket(struct echo_session_s* session) {
  errno = 0;
  write(session->socket, session->buf, session->bytes);
}

void free_buffer(struct echo_session_s* session) {
  free(session->buf);
  session->buf = NULL;
}

void end_session(struct echo_session_s* session) {
  close(session->socket);
  free(session);
}

%}

coroutine (await_t) echo_server_listen(struct echo_server_s*) {
  echo_listen;
  while {% 1 %} {
    yield {% fiber_await(arg->socket, EV_READ); %}; //wait for accept readability
    accept_connection;
  }
}

coroutine (await_t) echo_session(struct echo_session_s*) {
  {% arg->active = 1; %}
  while {% arg->active %} {
    read_client_socket;
    while {% errno == EWOULDBLOCK %} {
      free_buffer;
      yield {% fiber_await(arg->socket, EV_READ); %}; //await readability
      read_client_socket;
    }
    if {% arg->active %} {
      write_client_socket;
      while {% errno == EWOULDBLOCK %} {
        yield {% fiber_await(arg->socket, EV_WRITE); %}; //await writeability
        write_client_socket;
      }
    }
  }
  end_session;
}

{%

int main() {
  fiber_scheduler_init();
  struct echo_server_s* serv = malloc(sizeof(struct echo_server_s));
  serv->port = 8000;
  spawn_fiber(echo_server_listen, serv);
  fiber_scheduler_run();
  free(serv);
}

%}
